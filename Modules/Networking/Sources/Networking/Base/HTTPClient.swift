//
//  File.swift
//
//
//  Created by –í–ª–∞–¥–∏—Å–ª–∞–≤ –ö–æ–≤–∞–ª—å—Å–∫–∏–π on 22.06.2023.
//

import Foundation
import OSLog

public protocol HTTPClient: AnyObject {
    func sendRequest<T: Decodable>(session: URLSession,
                                   logger: Logger,
                                   endpoint: any HTTPEndpoint,
                                   responseModel: T.Type) async throws(HTTPRequestError) -> T
}

public extension HTTPClient {
    func sendRequest<T: Decodable>(session: URLSession = .shared,
                                   logger: Logger,
                                   endpoint: any HTTPEndpoint,
                                   responseModel: T.Type) async throws(HTTPRequestError) -> T {
        guard let url = endpoint.url else { throw .invalidURL }
        var request: URLRequest = .init(url: url, timeoutInterval: 60)
        request.httpMethod = endpoint.method.rawValue
        request.allHTTPHeaderFields = endpoint.header
        request.httpBody = endpoint.body.data
        
        loggerRequest(request: request, logger: logger)
        return try await dataTask(with: session, and: request, responseModel: responseModel)
    }
    
    /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ URLRequest.
    func dataTask<T: Decodable>(with session: URLSession,
                                and request: URLRequest,
                                responseModel: T.Type) async throws(HTTPRequestError) -> T {
        
        do {
            let result = try await session.data(for: request)
            return try await handlingDataTask(data: result.0, response: result.1, responseModel: responseModel)
        } catch {
            throw .noResponse
        }
    }
    
    /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∑–∞–ø—Ä–æ—Å–∞.
    func handlingDataTask<T: Decodable>(data: Data?,
                                        response: URLResponse?,
                                        responseModel: T.Type) async throws(HTTPRequestError) -> T {
        guard let responseCode = (response as? HTTPURLResponse)?.statusCode else { throw .noResponse }
        
        switch responseCode {
        case 200...299:
            if responseModel is Data.Type {
                return responseModel as! T
            }

            guard let decodedData = data?.decode(model: responseModel) else { throw .decode }
            return decodedData
        case 400:
            if let decodeData = data?.decode(model: ValidatorErrorResponse.self) {
                throw .validator(error: decodeData)
            }
            throw .unexpectedStatusCode(code: responseCode, localized: responseCode.localStatusCode)
        case 401:
            throw .unauthorizate
        default:
            throw .unexpectedStatusCode(code: responseCode, localized: responseCode.localStatusCode)
        }
    }
}

// MARK: - Logging
private extension HTTPClient {
    /// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ URLRequest –≤ –ª–æ–≥.
    /// - Parameters:
    ///   - request: –ó–∞–ø—Ä–æ—Å, –¥–µ—Ç–∞–ª–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥.
    ///   - logger: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    func loggerRequest(request: URLRequest, logger: Logger) {
        let body: [String: Any] = extractRequestBody(request: request)
        
        logger.debug(
                """
                üõú SEND REQUEST
                ____________________________________________
                URL: \(request.url?.absoluteString ?? "nil")
                HEADERS:
                \(request.allHTTPHeaderFields ?? [:], privacy: .private)
                METHOD: \(request.httpMethod ?? "nil")
                BODY:
                \(body, privacy: .private)
                ____________________________________________
                """
        )
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è JSON –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
    /// - Parameter request: URLRequest, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–æ.
    /// - Returns: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è [String: Any] –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
    func extractRequestBody(request: URLRequest) -> [String: Any] {
        guard let data = request.httpBody else { return [:] }
        
        if let jsonObject = try? JSONSerialization.jsonObject(with: data) as? [String: Any], !jsonObject.isEmpty {
            return jsonObject
        } else {
            return ["noJsonData": String(data: data, encoding: .utf8) ?? ""]
        }
    }
}
